@page "/accounts/edit/{id:int}"
@inject IMeterReadingsApiClient apiClient
@inject NavigationManager NavigationManager

<h1>Edit Account</h1>
<hr />

@if (accountModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@accountModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>Account Id</p>
        <p>
            <InputNumber id="accountId" @bind-Value="accountModel.Id" disabled="true" />
        </p>
        <p>First Name</p>
        <p>
            <InputText id="firstname" @bind-Value="accountModel.FirstName" />
        </p>
        <p>Last Name</p>
        <p>
            <InputText id="lastname" @bind-Value="accountModel.LastName" />
        </p>
        <p>
            <button type="submit">Save</button>
        </p>
    </EditForm>

    <p>
        <NavLink href="/accounts">Back to Accounts</NavLink>
    </p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private AccountViewModel accountModel;

    protected override async Task OnInitializedAsync()
    {
        AccountDto accountDto = await apiClient.Accounts.GetAsync(Id);
        accountModel = new Mapper(ViewModelMapperConfig.Config).Map<AccountViewModel>(accountDto);
    }

    private async Task HandleValidSubmit()
    {
        AccountDto accountDto = new Mapper(ViewModelMapperConfig.Config).Map<AccountDto>(accountModel);
        await apiClient.Accounts.UpdateAsync(accountDto);

        NavigationManager.NavigateTo("/accounts");
    }
}
